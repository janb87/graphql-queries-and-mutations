### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Category {
  id: Int!
  name: String!
  posts: [Post!]!
}

input CategoryCreateInput {
  name: String!
  posts: PostCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateWithoutPostsInput {
  name: String!
}

input CategoryWhereUniqueInput {
  id: Int
  name: String
}

type Mutation {
  addPostToCategory(cagetoryId: Int, postId: Int): Category!
  createCategory(data: CategoryCreateInput!): Category!
  createDraft(authorEmail: String, content: String, title: String!): Post!
  createUserProfile(data: ProfileCreateInput!): Profile!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  publish(id: ID): Post
  signupUser(data: UserCreateInput!): User!
}

type Post {
  author: User
  categories: [Category!]!
  content: String
  id: Int!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutCategoriesInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutCategoriesInput!]
}

input PostCreateWithoutAuthorInput {
  categories: CategoryCreateManyWithoutPostsInput
  content: String
  published: Boolean
  title: String!
}

input PostCreateWithoutCategoriesInput {
  author: UserCreateOneWithoutPostsInput
  content: String
  published: Boolean
  title: String!
}

input PostWhereUniqueInput {
  id: Int
}

type Profile {
  bio: String!
  id: Int!
  user: User!
}

input ProfileCreateInput {
  bio: String!
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  bio: String!
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  feed: [Post!]!
  filterPosts(published: Boolean, searchString: String): [Post!]!
  post(where: PostWhereUniqueInput!): Post
}

type User {
  email: String!
  id: Int!
  name: String
  posts: [Post!]!
  profile: Profile
}

input UserCreateInput {
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfileInput
}

input UserCreateWithoutPostsInput {
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateWithoutProfileInput {
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
